{"version":3,"file":"index.js","mappings":"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","sources":["webpack://inject-loader/webpack/bootstrap","webpack://inject-loader/webpack/runtime/define property getters","webpack://inject-loader/webpack/runtime/hasOwnProperty shorthand","webpack://inject-loader/webpack/runtime/make namespace object","webpack://inject-loader/external commonjs \"@babel/core\"","webpack://inject-loader/./src/wrapper_template.js","webpack://inject-loader/./src/wrapper_template_esm.js","webpack://inject-loader/./src/injectify.js","webpack://inject-loader/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/core\");","// @flow\n\nimport {template} from '@babel/core';\n\nexport default template(`\n  module.exports = function __injector(__injections) {\n    __injections = __injections || {};\n\n    (function __validateInjection() {\n      var validDependencies = DEPENDENCIES;\n      var injectedDependencies = Object.keys(__injections);\n      var invalidInjectedDependencies = injectedDependencies.filter(function (dependency) {\n        return validDependencies.indexOf(dependency) === -1;\n      });\n\n      if (invalidInjectedDependencies.length > 0) {\n        var validDependenciesString = ' - ' + validDependencies.join('\\\\n - ');\n        var injectedDependenciesString = ' - ' + injectedDependencies.join('\\\\n - ');\n        var invalidDependenciesString = ' - ' + invalidInjectedDependencies.join('\\\\n - ');\n\n        throw new Error('Injection Error in ' + SOURCE_PATH + '\\\\n\\\\n' +\n          'The following injections are invalid:\\\\n' + invalidDependenciesString + '\\\\n\\\\n' +\n          'The following injections were passed in:\\\\n' + injectedDependenciesString + '\\\\n\\\\n' +\n          'Valid injection targets for this module are:\\\\n' + validDependenciesString + '\\\\n'\n        );\n      }\n    })();\n\n    __injector.sourcePath = SOURCE_PATH;\n    __injector.validDependencies = DEPENDENCIES;\n\n    var module = { exports: {} };\n    var exports = module.exports;\n\n    (function () {\n      SOURCE\n    })();\n\n    return module.exports;\n  }\n`);\n","// @flow\n\nimport {template} from '@babel/core';\n\nexport default template(\n  `\n    export default function __injector(__injections) {\n        __injections = __injections || {};\n\n        (function __validateInjection() {\n        var validDependencies = DEPENDENCIES;\n        var injectedDependencies = Object.keys(__injections);\n        var invalidInjectedDependencies = injectedDependencies.filter(function (dependency) {\n            return validDependencies.indexOf(dependency) === -1;\n        });\n\n        if (invalidInjectedDependencies.length > 0) {\n            var validDependenciesString = ' - ' + validDependencies.join('\\\\n - ');\n            var injectedDependenciesString = ' - ' + injectedDependencies.join('\\\\n - ');\n            var invalidDependenciesString = ' - ' + invalidInjectedDependencies.join('\\\\n - ');\n\n            throw new Error('Injection Error in ' + SOURCE_PATH + '\\\\n\\\\n' +\n            'The following injections are invalid:\\\\n' + invalidDependenciesString + '\\\\n\\\\n' +\n            'The following injections were passed in:\\\\n' + injectedDependenciesString + '\\\\n\\\\n' +\n            'Valid injection targets for this module are:\\\\n' + validDependenciesString + '\\\\n'\n            );\n        }\n        })();\n\n        __injector.sourcePath = SOURCE_PATH;\n        __injector.validDependencies = DEPENDENCIES;\n\n        var module = { exports: {} };\n        var exports = module.exports;\n\n        (function () {\n        SOURCE\n        })();\n\n        if (module.exports.hasOwnProperty('default') && Object.keys(module.exports).length === 1) {\n            module.exports = module.exports.default;\n        }\n\n        return module.exports;\n    }\n`,\n  {\n    sourceType: 'module',\n  }\n);\n","// @flow\n\nimport {transformSync, traverse, types as t, transformFromAstSync} from '@babel/core';\nimport wrapperTemplate from './wrapper_template.js';\nimport wrapperTemplateESM from './wrapper_template_esm.js';\n\nfunction processRequireCall(path) {\n  const dependencyString = path.node.arguments[0].value;\n  path.replaceWith(\n    t.expressionStatement(\n      t.conditionalExpression(\n        t.callExpression(\n          t.memberExpression(t.identifier('__injections'), t.identifier('hasOwnProperty'), false),\n          [t.stringLiteral(dependencyString)]\n        ),\n        t.memberExpression(t.identifier('__injections'), t.stringLiteral(dependencyString), true),\n        path.node\n      )\n    )\n  );\n\n  return dependencyString;\n}\n\nfunction processImport(path) {\n  const node = path.node;\n  const dependencyString = node.source.value;\n\n  const injectionStatements = [];\n  const aliasedSpecifiers = node.specifiers.map(specifier => {\n    const localIdentifier = specifier.local;\n    const importedIdentifier = specifier.imported;\n    // ex: __React\n    const aliasIdentifier = t.identifier(`__${localIdentifier.name}`);\n\n    // __injections['react']\n    let injectionExpression = t.memberExpression(\n      t.identifier('__injections'),\n      t.stringLiteral(dependencyString),\n      true\n    );\n    if (specifier.type === 'ImportSpecifier') {\n      // __injections['react'].Component\n      injectionExpression = t.memberExpression(injectionExpression, importedIdentifier);\n    }\n\n    injectionStatements.push(\n      t.variableDeclaration('var', [\n        t.variableDeclarator(\n          localIdentifier,\n          t.conditionalExpression(\n            t.callExpression(\n              t.memberExpression(\n                t.identifier('__injections'),\n                t.identifier('hasOwnProperty'),\n                false\n              ),\n              [t.stringLiteral(dependencyString)]\n            ),\n            injectionExpression,\n            aliasIdentifier\n          )\n        ),\n      ])\n    );\n\n    specifier.local = aliasIdentifier;\n    return specifier;\n  });\n\n  const aliasedImport = t.importDeclaration(aliasedSpecifiers, node.source);\n\n  path.replaceWithMultiple(injectionStatements);\n\n  return {\n    node: aliasedImport,\n    dependencyString,\n  };\n}\n\nfunction processDynamicImport(path) {\n  const dependencyString = path.node.arguments[0].value;\n\n  path.replaceWith(\n    t.expressionStatement(\n      t.conditionalExpression(\n        t.callExpression(\n          t.memberExpression(t.identifier('__injections'), t.identifier('hasOwnProperty'), false),\n          [t.stringLiteral(dependencyString)]\n        ),\n        t.callExpression(\n          t.memberExpression(t.identifier('Promise'), t.identifier('resolve'), false),\n          [\n            t.memberExpression(\n              t.identifier('__injections'),\n              t.stringLiteral(dependencyString),\n              true\n            ),\n          ]\n        ),\n        path.node\n      )\n    )\n  );\n\n  return dependencyString;\n}\n\n// module.exports[exportIdentifier] = localIdentifier\nfunction createExportAssignment(exportIdentifier, localIdentifier) {\n  return t.expressionStatement(\n    t.assignmentExpression(\n      '=',\n      t.memberExpression(\n        t.memberExpression(t.identifier('module'), t.identifier('exports'), false),\n        exportIdentifier,\n        false\n      ),\n      localIdentifier\n    )\n  );\n}\n\nfunction processDefaultExport(path) {\n  let exportAssignment;\n  const declaration = path.node.declaration;\n\n  if (declaration.type === 'FunctionDeclaration') {\n    exportAssignment = createExportAssignment(\n      t.identifier('default'),\n      t.functionExpression(\n        declaration.id,\n        declaration.params,\n        declaration.body,\n        declaration.generator,\n        declaration.async\n      )\n    );\n  } else {\n    exportAssignment = createExportAssignment(t.identifier('default'), path.node.declaration);\n  }\n\n  path.replaceWith(exportAssignment);\n}\n\nfunction processExport(path) {\n  let statements = [];\n\n  const declaration = path.node.declaration;\n  if (declaration) {\n    statements.push(declaration);\n\n    if (Array.isArray(declaration.declarations)) {\n      declaration.declarations.forEach(d => {\n        let isLiteral = false;\n        if (d.init && d.init.type.endsWith('Literal')) {\n          isLiteral = true;\n        }\n        statements.push(createExportAssignment(d.id, isLiteral ? d.init : d.id));\n      });\n    } else {\n      statements.push(createExportAssignment(declaration.id, declaration.id));\n    }\n  } else {\n    statements = path.node.specifiers.map(specifier =>\n      createExportAssignment(specifier.exported, specifier.local)\n    );\n  }\n\n  path.replaceWithMultiple(statements);\n}\n\nexport default function injectify(context: Object, source: string, inputSourceMap: string) {\n  const {ast} = transformSync(source, {\n    ast: true,\n    code: false,\n    compact: false,\n    filename: context.resourcePath,\n  });\n\n  const dependencies = [];\n  const imports = [];\n  let usesESModules = false;\n\n  traverse(ast, {\n    CallExpression(path) {\n      if (\n        t.isIdentifier(path.node.callee, {\n          name: 'require',\n        })\n      ) {\n        dependencies.push(processRequireCall(path));\n        path.skip();\n      } else if (t.isImport(path.node.callee)) {\n        dependencies.push(processDynamicImport(path));\n        path.skip();\n      }\n    },\n    ImportDeclaration(path) {\n      usesESModules = true;\n      const {node, dependencyString} = processImport(path);\n      imports.push(node);\n      dependencies.push(dependencyString);\n      path.skip();\n    },\n    ExportDefaultDeclaration(path) {\n      usesESModules = true;\n      processDefaultExport(path);\n      path.skip();\n    },\n    ExportNamedDeclaration(path) {\n      usesESModules = true;\n      processExport(path);\n      path.skip();\n    },\n  });\n\n  if (dependencies.length === 0) {\n    context.emitWarning(\n      \"The module you are trying to inject into doesn't have any dependencies. \" +\n        'Are you sure you want to do this?'\n    );\n  }\n\n  const template = usesESModules ? wrapperTemplateESM : wrapperTemplate;\n\n  const wrapperModuleAst = t.file(\n    t.program([\n      ...imports,\n      template({\n        SOURCE: ast.program.body,\n        SOURCE_PATH: t.stringLiteral(context.resourcePath),\n        DEPENDENCIES: t.arrayExpression(dependencies.map(d => t.stringLiteral(d))),\n      }),\n    ]),\n    []\n  );\n\n  return transformFromAstSync(wrapperModuleAst, source, {\n    sourceMaps: context.sourceMap,\n    sourceFileName: context.resourcePath,\n    inputSourceMap: inputSourceMap || undefined,\n    babelrc: false,\n    compact: false,\n    configFile: false,\n    filename: context.resourcePath,\n  });\n}\n","// @flow\n\nimport injectify from './injectify.js';\n\nexport default function injectifyLoader(source: string, inputSourceMap: string) {\n  if (this.cacheable) {\n    this.cacheable();\n  }\n\n  const {code, map} = injectify(this, source, inputSourceMap);\n  this.callback(null, code, map);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","template","sourceType","createExportAssignment","exportIdentifier","localIdentifier","t","expressionStatement","assignmentExpression","memberExpression","identifier","injectifyLoader","source","inputSourceMap","this","cacheable","_injectify","context","ast","transformSync","code","compact","filename","resourcePath","dependencies","imports","usesESModules","traverse","CallExpression","path","isIdentifier","node","callee","name","push","dependencyString","arguments","replaceWith","conditionalExpression","callExpression","stringLiteral","processRequireCall","skip","isImport","processDynamicImport","ImportDeclaration","_processImport","injectionStatements","aliasedSpecifiers","specifiers","map","specifier","local","importedIdentifier","imported","aliasIdentifier","injectionExpression","type","variableDeclaration","variableDeclarator","aliasedImport","importDeclaration","replaceWithMultiple","processImport","ExportDefaultDeclaration","exportAssignment","declaration","functionExpression","id","params","body","generator","async","processDefaultExport","ExportNamedDeclaration","statements","Array","isArray","declarations","forEach","d","isLiteral","init","endsWith","exported","processExport","length","emitWarning","wrapperTemplateESM","wrapperTemplate","wrapperModuleAst","file","program","SOURCE","SOURCE_PATH","DEPENDENCIES","arrayExpression","transformFromAstSync","sourceMaps","sourceMap","sourceFileName","undefined","babelrc","configFile","injectify","callback"],"sourceRoot":""}